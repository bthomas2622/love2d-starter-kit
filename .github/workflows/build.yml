name: Build LOVE Game

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read
  issues: read

env:
  # Product Information
  PRODUCT_NAME: "LOVE2D Starter Kit"
  # Build Configuration
  OUTPUT_FOLDER: "./build"
  PRODUCT_FILE: "love-2d-starter-kit"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
            
      - name: Create output directory
        run: mkdir -p build
        
      - name: Build LOVE package
        run: |
          # Make the build script executable and run it
          chmod +x ./utils/build-love.sh
          ./utils/build-love.sh
            
      - name: Upload .love artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_FILE }}.love
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_FILE }}.love
              
      - name: Create tools directory
        run: mkdir -p ./tools

      - name: Install Tools
        run: |
          sudo apt-get update && sudo apt-get install -y imagemagick && \
          sudo apt-get install -y unzip && \
          sudo apt-get install -y curl && \
          sudo apt-get install -y rsync && \
          sudo apt-get install -y p7zip-full
        
      - name: Build HTML package
        run: |
          curl -fsSL --retry 5 --retry-delay 15 --connect-timeout 30 --max-time 300 https://github.com/2dengine/love.js/archive/refs/heads/main.zip -o ./tools/love.js.zip || exit 1
          unzip -q ./tools/love.js.zip -d ./tools/
          
          # Create a custom index.html for itch.io compatibility with improved error handling
          cat > ./tools/love.js-main/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <meta http-equiv="Cross-Origin-Opener-Policy" content="same-origin">
              <meta http-equiv="Cross-Origin-Embedder-Policy" content="require-corp">
              <title>${{ env.PRODUCT_NAME }}</title>
              <style>
                  body { 
                      margin: 0; 
                      padding: 0; 
                      background: #000; 
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      min-height: 100vh;
                      font-family: Arial, sans-serif;
                  }
                  canvas { 
                      display: block; 
                      max-width: 100%;
                      max-height: 100%;
                  }
                  #loading {
                      color: white;
                      text-align: center;
                      padding: 20px;
                  }
                  #error {
                      color: #ff6b6b;
                      text-align: center;
                      padding: 20px;
                      background: rgba(255, 107, 107, 0.1);
                      border: 1px solid #ff6b6b;
                      border-radius: 5px;
                      margin: 20px;
                      max-width: 600px;
                  }
              </style>
          </head>
          <body>
              <div id="loading">Loading game...</div>
              <script>
                  window.addEventListener('DOMContentLoaded', function() {
                      var loadingDiv = document.getElementById('loading');
                      loadingDiv.style.display = 'none';
                      
                      var script = document.createElement('script');
                      script.src = 'player.js?g=game.love&n=1';
                      
                      script.onerror = function() {
                          loadingDiv.innerHTML = '<div id="error">Error loading game. Please check console for details.<br><br>If you\'re seeing this on itch.io, the game may be loading in compatibility mode.</div>';
                          loadingDiv.style.display = 'block';
                      };
                      
                      script.onload = function() {
                          console.log('Player script loaded successfully');
                      };
                      
                      document.body.appendChild(script);
                  });
                  
                  // Additional error handling for SharedArrayBuffer issues
                  window.addEventListener('error', function(e) {
                      if (e.message && e.message.includes('SharedArrayBuffer')) {
                          console.log('SharedArrayBuffer error detected, this is normal on static hosts like itch.io');
                      }
                  });
              </script>
          </body>
          </html>
          EOF
          
          # Create a compatibility mode version for itch.io
          cat > ./tools/love.js-main/index-compat.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <title>${{ env.PRODUCT_NAME }} (Compatibility Mode)</title>
              <style>
                  body { 
                      margin: 0; 
                      padding: 0; 
                      background: #000; 
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      min-height: 100vh;
                      font-family: Arial, sans-serif;
                  }
                  canvas { 
                      display: block; 
                      max-width: 100%;
                      max-height: 100%;
                  }
                  #loading {
                      color: white;
                      text-align: center;
                      padding: 20px;
                  }
                  #error {
                      color: #ff6b6b;
                      text-align: center;
                      padding: 20px;
                      background: rgba(255, 107, 107, 0.1);
                      border: 1px solid #ff6b6b;
                      border-radius: 5px;
                      margin: 20px;
                      max-width: 600px;
                  }
              </style>
          </head>
          <body>
              <div id="loading">Loading game in compatibility mode...</div>
              <script>
                  window.addEventListener('DOMContentLoaded', function() {
                      var loadingDiv = document.getElementById('loading');
                      loadingDiv.style.display = 'none';
                      
                      var script = document.createElement('script');
                      // Force compatibility mode by adding c=1 parameter
                      script.src = 'player.js?g=game.love&c=1&n=1';
                      
                      script.onerror = function() {
                          loadingDiv.innerHTML = '<div id="error">Error loading game in compatibility mode. Please check console for details.</div>';
                          loadingDiv.style.display = 'block';
                      };
                      
                      script.onload = function() {
                          console.log('Player script loaded in compatibility mode');
                      };
                      
                      document.body.appendChild(script);
                  });
              </script>
          </body>
          </html>
          EOF
          
          # Create enhanced .htaccess file for better server compatibility
          cat > ./tools/love.js-main/.htaccess << 'EOF'
          # Headers for SharedArrayBuffer support (if server supports it)
          <IfModule mod_headers.c>
              Header always set Cross-Origin-Opener-Policy "same-origin"
              Header always set Cross-Origin-Embedder-Policy "require-corp"
          </IfModule>
          
          # MIME types for LOVE2D files
          <IfModule mod_mime.c>
              AddType application/octet-stream .love
              AddType application/wasm .wasm
              AddType audio/ogg .ogg
          </IfModule>
          
          # Compression for better loading times
          <IfModule mod_deflate.c>
              AddOutputFilterByType DEFLATE text/html text/css application/javascript application/wasm
          </IfModule>
          
          # Cache control for game assets
          <IfModule mod_expires.c>
              ExpiresActive on
              ExpiresByType application/javascript "access plus 1 month"
              ExpiresByType application/wasm "access plus 1 month"
              ExpiresByType application/octet-stream "access plus 1 month"
              ExpiresByType audio/ogg "access plus 1 month"
          </IfModule>
          EOF
          
          # Modify player.js for better itch.io compatibility
          # Replace the SharedArrayBuffer error with fallback to compatibility mode
          if [ -f ./tools/love.js-main/player.js ]; then
            sed -i 's/throw new Error.*Cross-Origin Policy.*configured properly.*;//g' ./tools/love.js-main/player.js
            sed -i 's/return;//g' ./tools/love.js-main/player.js
            
            # Add fallback logic before the runLove() call
            sed -i '/if (!window\.SharedArrayBuffer) {/,/}/ {
              /if (!window\.SharedArrayBuffer) {/a\
                console.warn('\''SharedArrayBuffer not available, falling back to compatibility mode'\'');\
                // Force compatibility mode when SharedArrayBuffer is not available\
                ops.compat = true;
              /throw new Error/d
              /return;/d
            }' ./tools/love.js-main/player.js
          fi
          
          # Generate favicon if icon exists, otherwise use a default from existing assets
          if [ -f ./assets/icon.png ]; then
            convert ./assets/icon.png -define icon:auto-resize="256,128,96,64,48,32,24,16" ./tools/love.js-main/favicon.ico
          else
            echo "Warning: No icon found. Skipping favicon generation."
          fi
          
          # Create output directory and copy files
          mkdir -p "${{ env.OUTPUT_FOLDER }}/${PRODUCT_FILE}-html"
          
          # Copy essential love.js files (keep .htaccess for CORS headers)
          rsync -a --exclude='*.git*' --exclude='*.md' --exclude='*.txt' \
            ./tools/love.js-main/ \
            ${{ env.OUTPUT_FOLDER }}/${PRODUCT_FILE}-html/
          
          # Copy the game file
          cp -v ${{ env.OUTPUT_FOLDER }}/${PRODUCT_FILE}.love ${{ env.OUTPUT_FOLDER }}/${PRODUCT_FILE}-html/game.love
          
          # Create a README for deployment instructions
          cat > ${{ env.OUTPUT_FOLDER }}/${PRODUCT_FILE}-html/README.md << 'EOF'
          # HTML Build Deployment Guide
          
          This package contains the web version of your LÖVE2D game optimized for various hosting platforms.
          
          ## Files Included:
          
          - `index.html` - Main game page with automatic compatibility detection
          - `index-compat.html` - Compatibility mode version (recommended for itch.io)
          - `player.js` - Modified game loader with fallback support
          - `game.love` - Your game package
          - `.htaccess` - Server configuration (for Apache servers)
          - Various LÖVE.js engine files in subdirectories
          
          ## Deployment Options:
          
          ### For itch.io:
          1. Upload all files to itch.io
          2. Set `index-compat.html` as your main file, OR
          3. Use `index.html` which will automatically detect and use compatibility mode
          
          ### For other web hosts:
          1. Upload all files to your web server
          2. Use `index.html` as your main page
          3. The `.htaccess` file will configure proper headers if your server supports it
          
          ### For local testing:
          - Use a local web server (not file:// protocol)
          - Python: `python -m http.server 8000`
          - Node.js: Use the included server.js if available
          
          ## Troubleshooting:
          
          - **Black screen**: Try using `index-compat.html` instead
          - **Loading errors**: Check browser console for details
          - **Performance issues**: Ensure proper MIME types are configured on your server
          EOF
          
          # Create zip for upload
          7z a -tzip \
            "${{ env.OUTPUT_FOLDER }}/${PRODUCT_FILE}-html.zip" \
            "${{ env.OUTPUT_FOLDER }}/${PRODUCT_FILE}-html"/*
            
      - name: Upload HTML artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_FILE }}-html
          path: ${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_FILE }}-html

      - name: Download butler
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
        shell: bash
        run: |
          # Set butler platform based on runner OS
          BUTLER_PLATFORM="linux-amd64"
          BUTLER_EXEC="butler"
          mkdir ./butler 2>/dev/null || true
          pushd butler
            curl -L -o ./butler.zip "https://broth.itch.ovh/butler/${BUTLER_PLATFORM}/LATEST/archive/default"
            unzip butler.zip
            chmod +x ./${BUTLER_EXEC}
          popd
          ./butler/${BUTLER_EXEC} -V
      - name: Upload to itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
        shell: bash
        run: |
          BUTLER_EXEC="butler"
          versionArgument=""
          ./butler/${BUTLER_EXEC} push \
            "${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_FILE }}.love" \
            ${{ secrets.ITCH_USERNAME }}/${{ secrets.ITCH_GAME }}:love ${versionArgument}
          ./butler/${BUTLER_EXEC} push \
            "${{ env.OUTPUT_FOLDER }}/${{ env.PRODUCT_FILE }}-html" \
            ${{ secrets.ITCH_USERNAME }}/${{ secrets.ITCH_GAME }}:html ${versionArgument}